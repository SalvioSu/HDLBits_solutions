module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output [3:1] ena,
    output [15:0] q);
    assign ena[1] = (q[3:0] == 4'd9)? 1:0;
    assign ena[2] = ((q[3:0] == 4'd9)&(q[7:4] == 4'd9))? 1:0;
    assign ena[3] = ((q[3:0] == 4'd9)&(q[7:4] == 4'd9)&(q[11:8] == 4'd9))? 1:0;
    
    BCD_Counter bcd1(clk, reset, 1, q[3:0]);
    BCD_Counter bcd2(clk, reset, ena[1], q[7:4]);
    BCD_Counter bcd3(clk, reset, ena[2], q[11:8]);
    BCD_Counter bcd4(clk, reset, ena[3], q[15:12]);
endmodule

module BCD_Counter(input clk, input reset, input ena, output [3:0] q);
    always @(posedge clk) begin
        if (reset)
            q <= 4'b0;
        else if (ena) begin
            if (q >= 4'd9) begin
                q <= 4'd0;
            end
            else begin
                q <= q+1'b1;
            end
        end
    end
endmodule
