module top_module (
    input clk,
    input reset,   // Synchronous reset
    input s,
    input w,
    output z
);
	parameter A = 0, B = 1;
    reg state, next_state;
    reg [2:0] data = 3'b000;
    reg [1:0] counter = 2'b00;
    always @(posedge clk) begin
        if (reset)
            state <= A;
        else
            state <= next_state;
    end
    always @(*) begin
        case (state)
            A: next_state = (s)? B:A;
            B: next_state = B;
            default: next_state = A;
        endcase
    end
    always @(posedge clk) begin
        if (reset) begin
            data <= 3'b000;
            counter <= 0;
        end else if (next_state == B) begin
            data <= {data[1:0], w};
            if (counter == 3)
                counter <= 1;
            else
                counter = counter+1;
        end
    end
    assign z = ((counter==1)&(data==3'b011 | data==3'b110 | data==3'b101))? 1:0;
endmodule

