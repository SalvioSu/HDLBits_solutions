module top_module(
    input clk,
    input load,
    input [255:0] data,
    output [255:0] q ); 
    always @(posedge clk) begin
        if (load)
            q[255:0] <= data[255:0];
        else begin
            for (int i=0; i<16; i++) begin
                for (int j=0; j<16; j++) begin
                    if ((q[(((i+15)%16)*16+(j+15)%16)] + q[(((i+15)%16)*16+j)] + q[(((i+15)%16)*16+(j+1)%16)] + q[(i*16+(j+15)%16)] + q[(i*16+(j+1)%16)] + q[(((i+1)%16)*16+(j+15)%16)] + q[(((i+1)%16)*16+j)] + q[(((i+1)%16)*16+(j+1)%16)]) == 2)
                        q[(i*16+j)] <= q[(i*16+j)];
                    else if((q[(((i+15)%16)*16+(j+15)%16)] + q[(((i+15)%16)*16+j)] + q[(((i+15)%16)*16+(j+1)%16)] + q[(i*16+(j+15)%16)] + q[(i*16+(j+1)%16)] + q[(((i+1)%16)*16+(j+15)%16)] + q[(((i+1)%16)*16+j)] + q[(((i+1)%16)*16+(j+1)%16)]) == 3)
                        q[(i*16+j)] <= 1;
            		else
                        q[i*16+j] <= 0;
                end
            end
        end
    end
endmodule

